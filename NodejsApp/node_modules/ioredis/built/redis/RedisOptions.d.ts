import { CommanderOptions } from "../utils/Commander";
import ConnectorConstructor from "../connectors/ConnectorConstructor";
import { SentinelConnectionOptions } from "../connectors/SentinelConnector";
import { StandaloneConnectionOptions } from "../connectors/StandaloneConnector";
export declare type ReconnectOnError = (err: Error) => boolean | 1 | 2;
interface CommonRedisOptions extends CommanderOptions {
    Connector?: ConnectorConstructor;
    retryStrategy?: (times: number) => number | void | null;
    commandTimeout?: number;
    keepAlive?: number;
    noDelay?: boolean;
    connectionName?: string;
    username?: string;
    password?: string;
    db?: number;
    autoResubscribe?: boolean;
    autoResendUnfulfilledCommands?: boolean;
    reconnectOnError?: ReconnectOnError;
    readOnly?: boolean;
    stringNumbers?: boolean;
    connectTimeout?: number;
    monitor?: boolean;
    maxRetriesPerRequest?: number;
    maxLoadingRetryTime?: number;
    enableAutoPipelining?: boolean;
    autoPipeliningIgnoredCommands?: string[];
    maxScriptsCachingTime?: number;
    offlineQueue?: boolean;
    commandQueue?: boolean;
    enableOfflineQueue?: boolean;
    enableReadyCheck?: boolean;
    lazyConnect?: boolean;
    scripts?: Record<string, {
        lua: string;
        numberOfKeys?: number;
        readOnly?: boolean;
    }>;
}
export declare type RedisOptions = CommonRedisOptions & SentinelConnectionOptions & StandaloneConnectionOptions;
export declare const DEFAULT_REDIS_OPTIONS: RedisOptions;
export {};
